use serde::Serialize;

use crate::domain::emulator::pkmn_fire_red::memory::read::{
    gba_offset, read_u8, read_u16, read_u32,
};

static SPECIES: [&str; 387] = [
    "",
    "Bulbasaur",
    "Ivysaur",
    "Venusaur",
    "Charmander",
    "Charmeleon",
    "Charizard",
    "Squirtle",
    "Wartortle",
    "Blastoise",
    "Caterpie",
    "Metapod",
    "Butterfree",
    "Weedle",
    "Kakuna",
    "Beedrill",
    "Pidgey",
    "Pidgeotto",
    "Pidgeot",
    "Rattata",
    "Raticate",
    "Spearow",
    "Fearow",
    "Ekans",
    "Arbok",
    "Pikachu",
    "Raichu",
    "Sandshrew",
    "Sandslash",
    "Nidoran♀",
    "Nidorina",
    "Nidoqueen",
    "Nidoran♂",
    "Nidorino",
    "Nidoking",
    "Clefairy",
    "Clefable",
    "Vulpix",
    "Ninetales",
    "Jigglypuff",
    "Wigglytuff",
    "Zubat",
    "Golbat",
    "Oddish",
    "Gloom",
    "Vileplume",
    "Paras",
    "Parasect",
    "Venonat",
    "Venomoth",
    "Diglett",
    "Dugtrio",
    "Meowth",
    "Persian",
    "Psyduck",
    "Golduck",
    "Mankey",
    "Primeape",
    "Growlithe",
    "Arcanine",
    "Poliwag",
    "Poliwhirl",
    "Poliwrath",
    "Abra",
    "Kadabra",
    "Alakazam",
    "Machop",
    "Machoke",
    "Machamp",
    "Bellsprout",
    "Weepinbell",
    "Victreebel",
    "Tentacool",
    "Tentacruel",
    "Geodude",
    "Graveler",
    "Golem",
    "Ponyta",
    "Rapidash",
    "Slowpoke",
    "Slowbro",
    "Magnemite",
    "Magneton",
    "Farfetch’d",
    "Doduo",
    "Dodrio",
    "Seel",
    "Dewgong",
    "Grimer",
    "Muk",
    "Shellder",
    "Cloyster",
    "Gastly",
    "Haunter",
    "Gengar",
    "Onix",
    "Drowzee",
    "Hypno",
    "Krabby",
    "Kingler",
    "Voltorb",
    "Electrode",
    "Exeggcute",
    "Exeggutor",
    "Cubone",
    "Marowak",
    "Hitmonlee",
    "Hitmonchan",
    "Lickitung",
    "Koffing",
    "Weezing",
    "Rhyhorn",
    "Rhydon",
    "Chansey",
    "Tangela",
    "Kangaskhan",
    "Horsea",
    "Seadra",
    "Goldeen",
    "Seaking",
    "Staryu",
    "Starmie",
    "Mr. Mime",
    "Scyther",
    "Jynx",
    "Electabuzz",
    "Magmar",
    "Pinsir",
    "Tauros",
    "Magikarp",
    "Gyarados",
    "Lapras",
    "Ditto",
    "Eevee",
    "Vaporeon",
    "Jolteon",
    "Flareon",
    "Porygon",
    "Omanyte",
    "Omastar",
    "Kabuto",
    "Kabutops",
    "Aerodactyl",
    "Snorlax",
    "Articuno",
    "Zapdos",
    "Moltres",
    "Dratini",
    "Dragonair",
    "Dragonite",
    "Mewtwo",
    "Mew",
    "Chikorita",
    "Bayleef",
    "Meganium",
    "Cyndaquil",
    "Quilava",
    "Typhlosion",
    "Totodile",
    "Croconaw",
    "Feraligatr",
    "Sentret",
    "Furret",
    "Hoothoot",
    "Noctowl",
    "Ledyba",
    "Ledian",
    "Spinarak",
    "Ariados",
    "Crobat",
    "Chinchou",
    "Lanturn",
    "Pichu",
    "Cleffa",
    "Igglybuff",
    "Togepi",
    "Togetic",
    "Natu",
    "Xatu",
    "Mareep",
    "Flaaffy",
    "Ampharos",
    "Bellossom",
    "Marill",
    "Azumarill",
    "Sudowoodo",
    "Politoed",
    "Hoppip",
    "Skiploom",
    "Jumpluff",
    "Aipom",
    "Sunkern",
    "Sunflora",
    "Yankaskhuh",
    "Wooper",
    "Quagsire",
    "Espeon",
    "Umbreon",
    "Murkrow",
    "Slowking",
    "Misdreavus",
    "Unown",
    "Wobbuffet",
    "Girafarig",
    "Pineco",
    "Forretress",
    "Dunsparce",
    "Gligar",
    "Steelix",
    "Snubbull",
    "Granbull",
    "Qwilfish",
    "Scizor",
    "Shuckle",
    "Heracross",
    "Sneasel",
    "Teddiursa",
    "Ursaring",
    "Slugma",
    "Magcargo",
    "Swinub",
    "Piloswine",
    "Corsola",
    "Remoraid",
    "Octillery",
    "Delibird",
    "Mantine",
    "Skarmory",
    "Houndour",
    "Houndoom",
    "Kingdra",
    "Phanpy",
    "Donphan",
    "Porygon2",
    "Stantler",
    "Smeargle",
    "Tyrogue",
    "Hitmontop",
    "Smoochum",
    "Elekid",
    "Magby",
    "Miltank",
    "Blissey",
    "Raikou",
    "Entei",
    "Suicune",
    "Larvitar",
    "Pupitar",
    "Tyranitar",
    "Lugia",
    "Ho-Oh",
    "Celebi",
    "Treecko",
    "Grovyle",
    "Sceptile",
    "Torchic",
    "Combusken",
    "Blaziken",
    "Mudkip",
    "Marshtomp",
    "Swampert",
    "Poochyena",
    "Mightyena",
    "Zigzagoon",
    "Linoone",
    "Wurmple",
    "Silcoon",
    "Beautifly",
    "Cascoon",
    "Dustox",
    "Lotad",
    "Lombre",
    "Ludicolo",
    "Seedot",
    "Nuzleaf",
    "Shiftry",
    "Taillow",
    "Swellow",
    "Wingull",
    "Pelipper",
    "Ralts",
    "Kirlia",
    "Gardevoir",
    "Surskit",
    "Masquerain",
    "Shroomish",
    "Breloom",
    "Slakoth",
    "Vigoroth",
    "Slaking",
    "Nincada",
    "Ninjask",
    "Shedinja",
    "Whismur",
    "Loudred",
    "Exploud",
    "Makuhita",
    "Hariyama",
    "Azurill",
    "Nosepass",
    "Skitty",
    "Delcatty",
    "Sableye",
    "Mawile",
    "Aron",
    "Lairon",
    "Aggron",
    "Meditite",
    "Medicham",
    "Electrike",
    "Manectric",
    "Plusle",
    "Minun",
    "Volbeat",
    "Illumise",
    "Roselia",
    "Gulpin",
    "Swalot",
    "Carvanha",
    "Sharpedo",
    "Wailmer",
    "Wailord",
    "Numel",
    "Camerupt",
    "Torkoal",
    "Spoink",
    "Grumpig",
    "Spinda",
    "Trapinch",
    "Vibrava",
    "Flygon",
    "Cacnea",
    "Cacturne",
    "Swablu",
    "Altaria",
    "Zangoose",
    "Seviper",
    "Lunatone",
    "Solrock",
    "Barboach",
    "Whiscash",
    "Corphish",
    "Crawdaunt",
    "Baltoy",
    "Claydol",
    "Lileep",
    "Cradily",
    "Anorith",
    "Armaldo",
    "Feebas",
    "Milotic",
    "Castform",
    "Kecleon",
    "Shuppet",
    "Banette",
    "Duskull",
    "Dusclops",
    "Tropius",
    "Chimecho",
    "Absol",
    "Wynaut",
    "Snorunt",
    "Glalie",
    "Spheal",
    "Sealeo",
    "Walrein",
    "Clamperl",
    "Huntail",
    "Gorebyss",
    "Relicanth",
    "Luvdisc",
    "Bagon",
    "Shelgon",
    "Salamence",
    "Beldum",
    "Metang",
    "Metagross",
    "Regirock",
    "Regice",
    "Registeel",
    "Latias",
    "Latios",
    "Kyogre",
    "Groudon",
    "Rayquaza",
    "Jirachi",
    "Deoxys",
];

pub fn species_name(id: u16) -> &'static str {
    SPECIES.get(id as usize).copied().unwrap_or("Unknown")
}
const SUB_ORDER: [[u8; 4]; 24] = [
    [0, 1, 2, 3],
    [0, 1, 3, 2],
    [0, 2, 1, 3],
    [0, 2, 3, 1],
    [0, 3, 1, 2],
    [0, 3, 2, 1],
    [1, 0, 2, 3],
    [1, 0, 3, 2],
    [1, 2, 0, 3],
    [1, 2, 3, 0],
    [1, 3, 0, 2],
    [1, 3, 2, 0],
    [2, 0, 1, 3],
    [2, 0, 3, 1],
    [2, 1, 0, 3],
    [2, 1, 3, 0],
    [2, 3, 0, 1],
    [2, 3, 1, 0],
    [3, 0, 1, 2],
    [3, 0, 2, 1],
    [3, 1, 0, 2],
    [3, 1, 2, 0],
    [3, 2, 0, 1],
    [3, 2, 1, 0],
];
#[derive(Debug, Clone, Copy, Serialize)]
pub struct StatSpread {
    pub hp: u8,
    pub atk: u8,
    pub def: u8,
    pub spa: u8,
    pub spd: u8,
    pub spe: u8,
}

#[derive(Debug, Clone, Copy, Serialize)]
pub struct MoveSlot {
    pub move_id: u16,
    pub pp: u8,
}

#[derive(Debug, Serialize)]
pub struct PartyPokemon {
    pub species_id: u16,
    pub species: String,
    pub level: u8,
    pub status: u32,
    pub hp: u16,
    pub max_hp: u16,
    pub stats: StatSpread,

    pub item: u16,
    pub exp: u32,
    pub friendship: u8,
    pub nature: u8,
    pub ivs: StatSpread,
    pub evs: StatSpread,
    pub ability_1: bool,
    pub pokerus: u8,

    pub moves: [MoveSlot; 4],
    pub pp_bonuses: u8,
}

pub fn get_party_at(buf: &[u8], base_addr: usize) -> Vec<PartyPokemon> {
    const SLOT: usize = 100;
    const ENC_START: usize = 0x20;
    const SUB: usize = 12;

    // índice 0 = Growth, 1 = Attacks, 2 = EVs, 3 = Misc

    let mut v = Vec::new();
    let base = gba_offset(base_addr);

    for i in 0..6 {
        let off = base + i * SLOT;

        let personality = read_u32(buf, off);
        let ot_id = read_u32(buf, off + 4);
        let key = personality ^ ot_id;
        let order = SUB_ORDER[(personality % 24) as usize];

        let ofs = |sub| off + ENC_START + order.iter().position(|&x| x == sub).unwrap() * SUB;

        let g = ofs(0); // Growth
        let a = ofs(1); // Attacks
        let e = ofs(2); // EVs
        let m = ofs(3); // Misc

        let species = (read_u32(buf, g) ^ key) as u16;
        if species == 0 {
            continue;
        }

        let word0 = read_u32(buf, g) ^ key;
        let word1 = read_u32(buf, g + 4) ^ key;
        let word2 = read_u32(buf, g + 8) ^ key;

        let item = (word0 >> 16) as u16;
        let exp = word1;
        let pp_bonuses = (word2 & 0xFF) as u8;
        let friendship = ((word2 >> 8) & 0xFF) as u8;

        let moves = [
            MoveSlot {
                move_id: (read_u16(buf, a) ^ (key as u16)),
                pp: read_u8(buf, a + 8) ^ (key as u8),
            },
            MoveSlot {
                move_id: (read_u16(buf, a + 2) ^ (key as u16)),
                pp: read_u8(buf, a + 9) ^ (key as u8),
            },
            MoveSlot {
                move_id: (read_u16(buf, a + 4) ^ (key as u16)),
                pp: read_u8(buf, a + 10) ^ (key as u8),
            },
            MoveSlot {
                move_id: (read_u16(buf, a + 6) ^ (key as u16)),
                pp: read_u8(buf, a + 11) ^ (key as u8),
            },
        ];

        let ev = |k| read_u8(buf, e + k) ^ (key as u8);
        let evs = StatSpread {
            hp: ev(0),
            atk: ev(1),
            def: ev(2),
            spe: ev(3),
            spa: ev(4),
            spd: ev(5),
        };

        let iv_word = read_u32(buf, m) ^ key;
        let iv = |shift: u8| -> u8 { ((iv_word >> shift) & 0x1F) as u8 };
        let ivs = StatSpread {
            hp: iv(0),
            atk: iv(5),
            def: iv(10),
            spe: iv(15),
            spa: iv(20),
            spd: iv(25),
        };
        let ability_1 = (iv_word >> 31) != 0;
        let pokerus = read_u8(buf, m + 8) ^ (key as u8);

        let status = read_u32(buf, off + 0x50);
        let level = read_u8(buf, off + 0x54);
        let hp = read_u16(buf, off + 0x56);
        let maxhp = read_u16(buf, off + 0x58);
        let atk = read_u16(buf, off + 0x5A);
        let def = read_u16(buf, off + 0x5C);
        let spe = read_u16(buf, off + 0x5E);
        let spa = read_u16(buf, off + 0x60);
        let spd = read_u16(buf, off + 0x62);

        v.push(PartyPokemon {
            species_id: species,
            species: species_name(species).to_string(),
            level,
            status,
            hp,
            max_hp: maxhp,
            stats: StatSpread {
                hp: 0,
                atk: (atk as u8),
                def: (def as u8),
                spa: (spa as u8),
                spd: (spd as u8),
                spe: (spe as u8),
            }, // ou calc real
            item,
            exp,
            friendship,
            nature: (personality % 25) as u8,
            ivs,
            evs,
            ability_1,
            pokerus,
            moves,
            pp_bonuses,
        });
    }
    v
}
